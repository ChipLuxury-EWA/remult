<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="1605" failures="0" errors="0" time="37.78">
    <testsuite name="projects/tests/dbs/sql-lite.spec.ts" timestamp="2023-12-25T12:58:02.605Z" hostname="Noamnew2018" tests="83" failures="0" errors="0" skipped="1" time="0.406">
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; what" time="0.03">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; data types" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; filter works on all db" time="0.006">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test in statement and " time="0.007">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; filter with and" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test empty in" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; filter works on all db or" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; filter works on all db or_1" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; filter works on all db or_2" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; filter with or and and" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; entity with different id column still works well" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; empty find works" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test descending" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test descending 2" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; partial updates" time="0.006">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; put with validations on entity fails" time="0.007">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test date only with null works" time="0.009">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test date with null works" time="0.01">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test original value of date" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test string with null works" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test tasks" time="0.006">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test filtering of null/&apos;&apos;" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test paging with complex object" time="0.012">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test paging with complex object_2" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test filter doesn&apos;t collapse" time="0.008">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test filter doesn&apos;t collapse" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test that it works with inheritance" time="0.006">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; put with validations on column fails" time="0.006">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; Insert" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test delete" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test filter packer" time="0.007">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; Test unique Validation," time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; Test unique Validation 2" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test that integer and int work" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; post with logic works and max in entity" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; get array works with filter in body" time="0.007">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; entity order by works" time="0.006">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; put with validation works" time="0.007">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; saves correctly to db" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; auto increment can&apos;t be affected by insert or update" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; Paging" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; filter" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; filter 2_1" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; filter 2" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; filter 3" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; filter 4" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; large string field" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; task with enum string" time="0.006">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test transaction rollback" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; transactions" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; transactions 1" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; transaction should fully rollback if one fail" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test date" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test live query storage" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test contains with names with casing" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test not-contains with names with casing" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test live query storage" time="0.008">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test json structure using object" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test object entity" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test object entity" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test json structure" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test json structure 2" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test json structure 3" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test relation to number id" time="0.008">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test relation to string id" time="0.008">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test update doesn&apos;t override other values" time="0.009">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test update doesn&apos;t validate non included fields" time="0.006">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test date" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; task with enum" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; custom id column &gt; basic test" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; custom id column &gt; basic test id column not first column" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test that update null works" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test number with null" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test save and load" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test2 save and load" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; knex with filter" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; work with native knex3" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; work with native knex" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; work with native knex2" time="0.007">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; knex filter" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; knex filter2" time="0.006">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; default order by" time="0.006">
        </testcase>
        <testcase classname="projects/tests/dbs/sql-lite.spec.ts" name="Sql Lite &gt; test sql expression" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/async-hooks.spec.ts" timestamp="2023-12-25T12:58:02.626Z" hostname="Noamnew2018" tests="1" failures="0" errors="0" skipped="0" time="0.025">
        <testcase classname="projects/tests/async-hooks.spec.ts" name="test async hooks and static remult" time="0.024">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/backendmethod-context-awareness.spec.ts" timestamp="2023-12-25T12:58:02.626Z" hostname="Noamnew2018" tests="5" failures="0" errors="0" skipped="0" time="0.012">
        <testcase classname="projects/tests/backendmethod-context-awareness.spec.ts" name="backend method context awareness &gt; getting error when async was initialized" time="0.001">
        </testcase>
        <testcase classname="projects/tests/backendmethod-context-awareness.spec.ts" name="backend method context awareness &gt; test run works" time="0">
        </testcase>
        <testcase classname="projects/tests/backendmethod-context-awareness.spec.ts" name="backend method context awareness &gt; test run works and returns" time="0.001">
        </testcase>
        <testcase classname="projects/tests/backendmethod-context-awareness.spec.ts" name="backend method context awareness &gt; test run works and returns Promise" time="0.007">
        </testcase>
        <testcase classname="projects/tests/backendmethod-context-awareness.spec.ts" name="backend method context awareness &gt; testing " time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/from-and-to-json.spec.ts" timestamp="2023-12-25T12:58:02.628Z" hostname="Noamnew2018" tests="8" failures="0" errors="0" skipped="0" time="0.023">
        <testcase classname="projects/tests/from-and-to-json.spec.ts" name="Test sync from and to json &gt; test that it works" time="0.003">
        </testcase>
        <testcase classname="projects/tests/from-and-to-json.spec.ts" name="Test sync from and to json &gt; test without loading it works" time="0.01">
        </testcase>
        <testcase classname="projects/tests/from-and-to-json.spec.ts" name="Test sync from and to json &gt; test with loading it works" time="0.002">
        </testcase>
        <testcase classname="projects/tests/from-and-to-json.spec.ts" name="Test sync from and to json &gt; test category" time="0.001">
        </testcase>
        <testcase classname="projects/tests/from-and-to-json.spec.ts" name="Test sync from and to json &gt; test with null category" time="0.001">
        </testcase>
        <testcase classname="projects/tests/from-and-to-json.spec.ts" name="Test sync from and to json &gt; works with array" time="0.001">
        </testcase>
        <testcase classname="projects/tests/from-and-to-json.spec.ts" name="Test sync from and to json &gt; works with lazy" time="0.002">
        </testcase>
        <testcase classname="projects/tests/from-and-to-json.spec.ts" name="Test sync from and to json &gt; works with lazy two" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/graphql.spec.ts" timestamp="2023-12-25T12:58:02.630Z" hostname="Noamnew2018" tests="28" failures="0" errors="0" skipped="0" time="0.508">
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test nodes" time="0.083">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test where translator" time="0.024">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test where translator in" time="0.012">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test where" time="0.024">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test where eq" time="0.028">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test where in" time="0.019">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test where or" time="0.016">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test where not in" time="0.014">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test contains" time="0.016">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test not contains" time="0.014">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; gets related entities" time="0.014">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test get single task by id" time="0.015">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test count" time="0.02">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test count two" time="0.015">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test limit no page no offset" time="0.015">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test limit page 2, offset 2" time="0.018">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test limit page 3, offset 4" time="0.017">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test mutation delete" time="0.012">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test mutation create" time="0.016">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test mutation create clientMutationId" time="0.011">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test mutation update" time="0.019">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test mutation generic error" time="0.012">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test mutation validation error" time="0.014">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test mutation update validation error" time="0.01">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test graphql" time="0.014">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test basics" time="0.008">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test allow api delete" time="0.017">
        </testcase>
        <testcase classname="projects/tests/graphql.spec.ts" name="graphql &gt; test allow api create" time="0.009">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/test-load-for-find-id.spec.ts" timestamp="2023-12-25T12:58:02.637Z" hostname="Noamnew2018" tests="1" failures="0" errors="0" skipped="0" time="0.014">
        <testcase classname="projects/tests/test-load-for-find-id.spec.ts" name="test load for find id &gt; test basic" time="0.013">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/backend-tests/test-express-server.spec.ts" timestamp="2023-12-25T12:58:02.638Z" hostname="Noamnew2018" tests="13" failures="0" errors="0" skipped="0" time="1.229">
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; works" time="0.105">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; test regular api call" time="0.043">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; test multiple items" time="0.053">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; validation" time="0.049">
            <system-err>
{
  message: [32m&apos;Title: Should not be empty&apos;[39m,
  stack: [90mundefined[39m,
  url: [32m&apos;/api/tasks&apos;[39m,
  method: [32m&apos;POST&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; forbidden" time="0.005">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; test queued job" time="0.44">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; test static remult" time="0.049">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; test injected remult" time="0.054">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; test http 404" time="0.053">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; test http 201" time="0.013">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; test regular api call" time="0.052">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; test live query" time="0.29">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-express-server.spec.ts" name="test express server &gt; test open api" time="0.008">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/backend-tests/test-fastify-server.spec.ts" timestamp="2023-12-25T12:58:02.641Z" hostname="Noamnew2018" tests="12" failures="0" errors="0" skipped="0" time="1.276">
        <testcase classname="projects/tests/backend-tests/test-fastify-server.spec.ts" name="test fastify server &gt; works" time="0.162">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-fastify-server.spec.ts" name="test fastify server &gt; test regular api call" time="0.047">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-fastify-server.spec.ts" name="test fastify server &gt; test multiple items" time="0.046">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-fastify-server.spec.ts" name="test fastify server &gt; validation" time="0.053">
            <system-err>
{
  message: [32m&apos;Title: Should not be empty&apos;[39m,
  stack: [90mundefined[39m,
  url: [32m&apos;/api/tasks&apos;[39m,
  method: [32m&apos;POST&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-fastify-server.spec.ts" name="test fastify server &gt; forbidden" time="0.013">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-fastify-server.spec.ts" name="test fastify server &gt; test queued job" time="0.421">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-fastify-server.spec.ts" name="test fastify server &gt; test static remult" time="0.039">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-fastify-server.spec.ts" name="test fastify server &gt; test injected remult" time="0.046">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-fastify-server.spec.ts" name="test fastify server &gt; test http 404" time="0.045">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-fastify-server.spec.ts" name="test fastify server &gt; test http 201" time="0.009">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-fastify-server.spec.ts" name="test fastify server &gt; test regular api call" time="0.049">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-fastify-server.spec.ts" name="test fastify server &gt; test live query" time="0.283">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/backend-tests/test-hapi.spec.ts" timestamp="2023-12-25T12:58:02.646Z" hostname="Noamnew2018" tests="12" failures="0" errors="0" skipped="0" time="1.293">
        <testcase classname="projects/tests/backend-tests/test-hapi.spec.ts" name="test hapi server &gt; works" time="0.101">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-hapi.spec.ts" name="test hapi server &gt; test regular api call" time="0.048">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-hapi.spec.ts" name="test hapi server &gt; test multiple items" time="0.053">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-hapi.spec.ts" name="test hapi server &gt; validation" time="0.047">
            <system-err>
{
  message: [32m&apos;Title: Should not be empty&apos;[39m,
  stack: [90mundefined[39m,
  url: URL {
    href: [32m&apos;http://127.0.0.1:3010/api/tasks&apos;[39m,
    origin: [32m&apos;http://127.0.0.1:3010&apos;[39m,
    protocol: [32m&apos;http:&apos;[39m,
    username: [32m&apos;&apos;[39m,
    password: [32m&apos;&apos;[39m,
    host: [32m&apos;127.0.0.1:3010&apos;[39m,
    hostname: [32m&apos;127.0.0.1&apos;[39m,
    port: [32m&apos;3010&apos;[39m,
    pathname: [32m&apos;/api/tasks&apos;[39m,
    search: [32m&apos;&apos;[39m,
    searchParams: URLSearchParams {},
    hash: [32m&apos;&apos;[39m
  },
  method: [32m&apos;post&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-hapi.spec.ts" name="test hapi server &gt; forbidden" time="0.009">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-hapi.spec.ts" name="test hapi server &gt; test queued job" time="0.443">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-hapi.spec.ts" name="test hapi server &gt; test static remult" time="0.061">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-hapi.spec.ts" name="test hapi server &gt; test injected remult" time="0.056">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-hapi.spec.ts" name="test hapi server &gt; test http 404" time="0.057">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-hapi.spec.ts" name="test hapi server &gt; test http 201" time="0.012">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-hapi.spec.ts" name="test hapi server &gt; test regular api call" time="0.058">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-hapi.spec.ts" name="test hapi server &gt; test live query" time="0.294">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/backend-tests/test-http-server.backend-spec.ts" timestamp="2023-12-25T12:58:02.651Z" hostname="Noamnew2018" tests="1" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="projects/tests/backend-tests/test-http-server.backend-spec.ts" name="test fresh" time="0.007">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/backend-tests/test-koa-server.spec.ts" timestamp="2023-12-25T12:58:02.652Z" hostname="Noamnew2018" tests="12" failures="0" errors="0" skipped="1" time="0.98">
        <testcase classname="projects/tests/backend-tests/test-koa-server.spec.ts" name="test koa server &gt; works" time="0.098">
            <system-out>
[remult] /api/testForbidden
[remult] /api/testStaticRemult
[remult] /api/testInjectedRemult
[remult] /api/testQueuedJob
[remult] /api/jobStatusInQueue
[remult] /api/tasks

            </system-out>
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-koa-server.spec.ts" name="test koa server &gt; test regular api call" time="0.05">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-koa-server.spec.ts" name="test koa server &gt; test multiple items" time="0.074">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-koa-server.spec.ts" name="test koa server &gt; validation" time="0.071">
            <system-err>
{
  message: [32m&apos;Title: Should not be empty&apos;[39m,
  stack: [90mundefined[39m,
  url: [32m&apos;/api/tasks&apos;[39m,
  method: [32m&apos;POST&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-koa-server.spec.ts" name="test koa server &gt; forbidden" time="0.005">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-koa-server.spec.ts" name="test koa server &gt; test queued job" time="0.442">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-koa-server.spec.ts" name="test koa server &gt; test static remult" time="0.05">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-koa-server.spec.ts" name="test koa server &gt; test injected remult" time="0.057">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-koa-server.spec.ts" name="test koa server &gt; test http 404" time="0.06">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-koa-server.spec.ts" name="test koa server &gt; test http 201" time="0.012">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-koa-server.spec.ts" name="test koa server &gt; test regular api call" time="0.051">
        </testcase>
        <testcase classname="projects/tests/backend-tests/test-koa-server.spec.ts" name="test koa server &gt; test live query" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/dbs/inMemory.spec.ts" timestamp="2023-12-25T12:58:02.656Z" hostname="Noamnew2018" tests="77" failures="0" errors="0" skipped="6" time="0.105">
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; what" time="0.009">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; data types" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; filter works on all db" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test in statement and " time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; filter with and" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test empty in" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; filter works on all db or" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; filter works on all db or_1" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; filter works on all db or_2" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; filter with or and and" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; entity with different id column still works well" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; empty find works" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test descending" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test descending 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; partial updates" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; put with validations on entity fails" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test date only with null works" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test date with null works" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test original value of date" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test string with null works" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test tasks" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test filtering of null/&apos;&apos;" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test paging with complex object" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test paging with complex object_2" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test filter doesn&apos;t collapse" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test filter doesn&apos;t collapse" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test that it works with inheritance" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; put with validations on column fails" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; Insert" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test delete" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test filter packer" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; Test unique Validation," time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; Test unique Validation 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test that integer and int work" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; post with logic works and max in entity" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; get array works with filter in body" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; entity order by works" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; put with validation works" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; saves correctly to db" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; auto increment can&apos;t be affected by insert or update" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; Paging" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; filter" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; filter 2_1" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; filter 2" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; filter 3" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; filter 4" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; large string field" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; task with enum string" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test transaction rollback" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; transactions" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; transactions 1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; transaction should fully rollback if one fail" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test date" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test contains with names with casing" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test not-contains with names with casing" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test json structure using object" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test object entity" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test object entity" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test json structure" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test json structure 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test json structure 3" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test relation to number id" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test relation to string id" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test update doesn&apos;t override other values" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test update doesn&apos;t validate non included fields" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test date" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; task with enum" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; custom id column &gt; basic test" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; custom id column &gt; basic test id column not first column" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test that update null works" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test number with null" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test save and load" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test2 save and load" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test doesn&apos;t store server expressions and db readonly" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/inMemory.spec.ts" name="In Memory Tests &gt; test db names are respected" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/dbs/mongo-no-trans.spec.ts" timestamp="2023-12-25T12:58:02.674Z" hostname="Noamnew2018" tests="79" failures="0" errors="0" skipped="79" time="0">
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; what" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; data types" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; filter works on all db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test in statement and " time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; filter with and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test empty in" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; filter works on all db or" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; filter works on all db or_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; filter works on all db or_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; filter with or and and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; entity with different id column still works well" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; empty find works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test descending" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test descending 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; partial updates" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; put with validations on entity fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test date only with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test date with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test original value of date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test string with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test tasks" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test filtering of null/&apos;&apos;" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test paging with complex object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test paging with complex object_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test that it works with inheritance" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; put with validations on column fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; Insert" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test delete" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test filter packer" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; Test unique Validation," time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; Test unique Validation 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test that integer and int work" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; post with logic works and max in entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; get array works with filter in body" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; entity order by works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; put with validation works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; saves correctly to db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; auto increment can&apos;t be affected by insert or update" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; Paging" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; filter 2_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; filter 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; filter 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; filter 4" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; large string field" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; task with enum string" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test transaction rollback" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; transactions" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; transactions 1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; transaction should fully rollback if one fail" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test not-contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test json structure using object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test json structure" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test json structure 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test json structure 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test relation to number id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test relation to string id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test update doesn&apos;t override other values" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test update doesn&apos;t validate non included fields" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; task with enum" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; custom id column &gt; basic test" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; custom id column &gt; basic test id column not first column" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test that update null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test number with null" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test2 save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test mongo without transaction" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; transactions mongo no trans" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test Dates" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo-no-trans.spec.ts" name="mongo without Transaction &gt; test object id" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/dbs/mongo.spec.ts" timestamp="2023-12-25T12:58:02.697Z" hostname="Noamnew2018" tests="77" failures="0" errors="0" skipped="77" time="0">
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; what" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; data types" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; filter works on all db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test in statement and " time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; filter with and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test empty in" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; filter works on all db or" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; filter works on all db or_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; filter works on all db or_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; filter with or and and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; entity with different id column still works well" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; empty find works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test descending" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test descending 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; partial updates" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; put with validations on entity fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test date only with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test date with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test original value of date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test string with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test tasks" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test filtering of null/&apos;&apos;" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test paging with complex object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test paging with complex object_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test that it works with inheritance" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; put with validations on column fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; Insert" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test delete" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test filter packer" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; Test unique Validation," time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; Test unique Validation 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test that integer and int work" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; post with logic works and max in entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; get array works with filter in body" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; entity order by works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; put with validation works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; saves correctly to db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; auto increment can&apos;t be affected by insert or update" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; Paging" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; filter 2_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; filter 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; filter 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; filter 4" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; large string field" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; task with enum string" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test transaction rollback" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; transactions" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; transactions 1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; transaction should fully rollback if one fail" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test not-contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test json structure using object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test json structure" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test json structure 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test json structure 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test relation to number id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test relation to string id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test update doesn&apos;t override other values" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test update doesn&apos;t validate non included fields" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; task with enum" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; custom id column &gt; basic test" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; custom id column &gt; basic test id column not first column" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test that update null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test number with null" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; test2 save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; work with native mongo and condition" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mongo.spec.ts" name="mongo with Transaction &gt; work with native mongo" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/dbs/mysql.spec.ts" timestamp="2023-12-25T12:58:02.716Z" hostname="Noamnew2018" tests="166" failures="0" errors="0" skipped="166" time="0">
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; what" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; data types" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; filter works on all db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test in statement and " time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; filter with and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test empty in" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; filter works on all db or" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; filter works on all db or_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; filter works on all db or_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; filter with or and and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; entity with different id column still works well" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; empty find works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test descending" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test descending 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; partial updates" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; put with validations on entity fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test date only with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test date with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test original value of date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test string with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test tasks" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test filtering of null/&apos;&apos;" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test paging with complex object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test paging with complex object_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test that it works with inheritance" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; put with validations on column fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; Insert" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test delete" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test filter packer" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; Test unique Validation," time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; Test unique Validation 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test that integer and int work" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; post with logic works and max in entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; get array works with filter in body" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; entity order by works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; put with validation works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; saves correctly to db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; auto increment can&apos;t be affected by insert or update" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; Paging" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; filter 2_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; filter 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; filter 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; filter 4" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; large string field" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; task with enum string" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test transaction rollback" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; transactions" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; transactions 1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; transaction should fully rollback if one fail" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test not-contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test json structure using object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test json structure" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test json structure 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test json structure 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test relation to number id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test relation to string id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test update doesn&apos;t override other values" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test update doesn&apos;t validate non included fields" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; task with enum" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; custom id column &gt; basic test" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; custom id column &gt; basic test id column not first column" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test that update null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test number with null" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test2 save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; knex with filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; work with native knex3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; work with native knex" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; work with native knex2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; knex filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; knex filter2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; default order by" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql &gt; test sql expression" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; what" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; data types" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; filter works on all db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test in statement and " time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; filter with and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test empty in" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; filter works on all db or" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; filter works on all db or_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; filter works on all db or_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; filter with or and and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; entity with different id column still works well" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; empty find works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test descending" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test descending 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; partial updates" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; put with validations on entity fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test date only with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test date with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test original value of date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test string with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test tasks" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test filtering of null/&apos;&apos;" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test paging with complex object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test paging with complex object_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test that it works with inheritance" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; put with validations on column fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; Insert" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test delete" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test filter packer" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; Test unique Validation," time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; Test unique Validation 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test that integer and int work" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; post with logic works and max in entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; get array works with filter in body" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; entity order by works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; put with validation works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; saves correctly to db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; auto increment can&apos;t be affected by insert or update" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; Paging" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; filter 2_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; filter 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; filter 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; filter 4" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; large string field" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; task with enum string" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test transaction rollback" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; transactions" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; transactions 1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; transaction should fully rollback if one fail" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test not-contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test json structure using object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test json structure" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test json structure 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test json structure 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test relation to number id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test relation to string id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test update doesn&apos;t override other values" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test update doesn&apos;t validate non included fields" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; task with enum" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; custom id column &gt; basic test" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; custom id column &gt; basic test id column not first column" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test that update null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test number with null" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test2 save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; knex with filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; work with native knex3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; work with native knex" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; work with native knex2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; knex filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; knex filter2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; default order by" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/mysql.spec.ts" name="mysql2 &gt; test sql expression" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/dbs/postgres-schema-builder.spec.ts" timestamp="2023-12-25T12:58:02.755Z" hostname="Noamnew2018" tests="5" failures="0" errors="0" skipped="5" time="0">
        <testcase classname="projects/tests/dbs/postgres-schema-builder.spec.ts" name="Test postgres schema builder &gt; create table with capitals" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres-schema-builder.spec.ts" name="Test postgres schema builder &gt; create 2 tables w and wo schema specification - only one should be created" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres-schema-builder.spec.ts" name="Test postgres schema builder &gt; Adding column" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres-schema-builder.spec.ts" name="Test postgres schema builder &gt; schema builder with default schema" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres-schema-builder.spec.ts" name="Test postgres schema builder &gt; schema builder with default schema &amp; overwritten at entity level" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/dbs/postgres.spec.ts" timestamp="2023-12-25T12:58:02.760Z" hostname="Noamnew2018" tests="167" failures="0" errors="0" skipped="167" time="0">
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; what" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; data types" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; filter works on all db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test in statement and " time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; filter with and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test empty in" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; filter works on all db or" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; filter works on all db or_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; filter works on all db or_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; filter with or and and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; entity with different id column still works well" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; empty find works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test descending" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test descending 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; partial updates" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; put with validations on entity fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test date only with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test date with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test original value of date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test string with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test tasks" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test filtering of null/&apos;&apos;" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test paging with complex object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test paging with complex object_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test that it works with inheritance" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; put with validations on column fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; Insert" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test delete" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test filter packer" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; Test unique Validation," time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; Test unique Validation 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test that integer and int work" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; post with logic works and max in entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; get array works with filter in body" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; entity order by works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; put with validation works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; saves correctly to db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; auto increment can&apos;t be affected by insert or update" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; Paging" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; filter 2_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; filter 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; filter 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; filter 4" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; large string field" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; task with enum string" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test transaction rollback" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; transactions" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; transactions 1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; transaction should fully rollback if one fail" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test not-contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test json structure using object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test json structure" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test json structure 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test json structure 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test relation to number id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test relation to string id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test update doesn&apos;t override other values" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test update doesn&apos;t validate non included fields" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; task with enum" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; custom id column &gt; basic test" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; custom id column &gt; basic test id column not first column" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test that update null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test number with null" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test2 save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; ensure schema with dbNames that have quotes" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; ensure on not_public schema" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; work with native sql" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; work with native sql2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; work with native sql3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; default order by" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; sql filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; sql filter2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Tests &gt; test column error" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; what" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; data types" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; filter works on all db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test in statement and " time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; filter with and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test empty in" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; filter works on all db or" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; filter works on all db or_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; filter works on all db or_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; filter with or and and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; entity with different id column still works well" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; empty find works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test descending" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test descending 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; partial updates" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; put with validations on entity fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test date only with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test date with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test original value of date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test string with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test tasks" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test filtering of null/&apos;&apos;" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test paging with complex object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test paging with complex object_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test that it works with inheritance" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; put with validations on column fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; Insert" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test delete" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test filter packer" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; Test unique Validation," time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; Test unique Validation 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test that integer and int work" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; post with logic works and max in entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; get array works with filter in body" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; entity order by works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; put with validation works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; saves correctly to db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; auto increment can&apos;t be affected by insert or update" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; Paging" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; filter 2_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; filter 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; filter 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; filter 4" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; large string field" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; task with enum string" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test transaction rollback" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; transactions" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; transactions 1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; transaction should fully rollback if one fail" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test not-contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test json structure using object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test json structure" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test json structure 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test json structure 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test relation to number id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test relation to string id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test update doesn&apos;t override other values" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test update doesn&apos;t validate non included fields" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; task with enum" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; custom id column &gt; basic test" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; custom id column &gt; basic test id column not first column" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test that update null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test number with null" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test2 save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; knex with filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; work with native knex3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; work with native knex" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; work with native knex2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; knex filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; knex filter2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; default order by" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/postgres.spec.ts" name="Postgres Knex &gt; test sql expression" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/dbs/rest.spec.ts" timestamp="2023-12-25T12:58:02.848Z" hostname="Noamnew2018" tests="78" failures="0" errors="0" skipped="6" time="0.177">
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; what" time="0.013">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; data types" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; filter works on all db" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test in statement and " time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; filter with and" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test empty in" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; filter works on all db or" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; filter works on all db or_1" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; filter works on all db or_2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; filter with or and and" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; entity with different id column still works well" time="0.007">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; empty find works" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test descending" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test descending 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; partial updates" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; put with validations on entity fails" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test date only with null works" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test date with null works" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test original value of date" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test string with null works" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test tasks" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test filtering of null/&apos;&apos;" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test paging with complex object" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test paging with complex object_2" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test filter doesn&apos;t collapse" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test filter doesn&apos;t collapse" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test that it works with inheritance" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; put with validations on column fails" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; Insert" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test delete" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test filter packer" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; Test unique Validation," time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; Test unique Validation 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test that integer and int work" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; post with logic works and max in entity" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; get array works with filter in body" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; entity order by works" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; put with validation works" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; saves correctly to db" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; auto increment can&apos;t be affected by insert or update" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; Paging" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; filter" time="0.006">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; filter 2_1" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; filter 2" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; filter 3" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; filter 4" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; large string field" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; task with enum string" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test transaction rollback" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; transactions" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; transactions 1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; transaction should fully rollback if one fail" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test date" time="0.006">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test contains with names with casing" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test not-contains with names with casing" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test json structure using object" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test object entity" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test object entity" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test json structure" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test json structure 2" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test json structure 3" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test relation to number id" time="0.003">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test relation to string id" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test update doesn&apos;t override other values" time="0.005">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test update doesn&apos;t validate non included fields" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test date" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; task with enum" time="0.002">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; custom id column &gt; basic test" time="0">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; custom id column &gt; basic test id column not first column" time="0.004">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test that update null works" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test number with null" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test save and load" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test2 save and load" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test api allowed" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test api allowed with condition" time="0.001">
        </testcase>
        <testcase classname="projects/tests/dbs/rest.spec.ts" name="Rest &gt; test api allowed only for new rows" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/dbs/sql-server.spec.ts" timestamp="2023-12-25T12:58:02.879Z" hostname="Noamnew2018" tests="83" failures="0" errors="0" skipped="83" time="0">
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; what" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; data types" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; filter works on all db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test in statement and " time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; filter with and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test empty in" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; filter works on all db or" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; filter works on all db or_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; filter works on all db or_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; filter with or and and" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; entity with different id column still works well" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; empty find works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test descending" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test descending 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; partial updates" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; put with validations on entity fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test date only with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test date with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test original value of date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test string with null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test tasks" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test filtering of null/&apos;&apos;" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test paging with complex object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test paging with complex object_2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test filter doesn&apos;t collapse" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test that it works with inheritance" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; put with validations on column fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; Insert" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test delete" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test filter packer" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; Test unique Validation," time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; Test unique Validation 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test that integer and int work" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; post with logic works and max in entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; get array works with filter in body" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; entity order by works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; put with validation works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; saves correctly to db" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; auto increment can&apos;t be affected by insert or update" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; Paging" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; filter 2_1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; filter 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; filter 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; filter 4" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; large string field" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; task with enum string" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test transaction rollback" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; transactions" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; transactions 1" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; transaction should fully rollback if one fail" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test not-contains with names with casing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test live query storage" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test json structure using object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test object entity" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test json structure" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test json structure 2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test json structure 3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test relation to number id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test relation to string id" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test update doesn&apos;t override other values" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test update doesn&apos;t validate non included fields" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test date" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; task with enum" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; custom id column &gt; basic test" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; custom id column &gt; basic test id column not first column" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test that update null works" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test number with null" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test2 save and load" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; knex with filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; work with native knex3" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; work with native knex" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; work with native knex2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; knex filter" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; knex filter2" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; default order by" time="0">
            <skipped/>
        </testcase>
        <testcase classname="projects/tests/dbs/sql-server.spec.ts" name="Knex Sql Server &gt; test sql expression" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/dbs/test-lazy-loading-timing.spec.ts" timestamp="2023-12-25T12:58:02.917Z" hostname="Noamnew2018" tests="3" failures="0" errors="0" skipped="0" time="0.049">
        <testcase classname="projects/tests/dbs/test-lazy-loading-timing.spec.ts" name="test lazy loading timing &gt; test many to many table with id based on relations" time="0.022">
        </testcase>
        <testcase classname="projects/tests/dbs/test-lazy-loading-timing.spec.ts" name="test lazy loading timing &gt; test table with id based on a many to one" time="0.012">
        </testcase>
        <testcase classname="projects/tests/dbs/test-lazy-loading-timing.spec.ts" name="test lazy loading timing &gt; test to json" time="0.014">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/basicRowFunctionality.spec.ts" timestamp="2023-12-25T12:58:02.918Z" hostname="Noamnew2018" tests="192" failures="0" errors="0" skipped="0" time="0.463">
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="grid filter stuff &gt; filter with contains" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="grid filter stuff &gt; filter with contains" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="grid filter stuff &gt; test in statement" time="0.009">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Closed List  column &gt; Basic Operations" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Closed List  column &gt; test auto caption" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Closed List  column &gt; test with entity" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Closed List  column &gt; test with entity and data defined on type" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Closed List  column &gt; test entity with value list get values" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; auto name" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; test update" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; test filter" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; test in filter packer" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; sort" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; counts" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; counts with filter" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; Test Validation 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; Test Validation 2_1" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; Test Validation 3" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; Test unique Validation and is not empty" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; test that it fails nicely" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; update should fail nicely" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; filter should return none" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; filter ignore works return none" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test row provider &gt; lookup survives row that doesn&apos;t exist" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="decorator inheritance &gt; entity extends" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="order by api &gt; works with sort" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="order by api &gt; works with columns array" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="order by api &gt; test several sort options" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test datetime column &gt; stores well" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test datetime column &gt; stores well undefined" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test datetime column &gt; displays empty date well" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test datetime column &gt; displays null date well 1" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test datetime column &gt; displays empty date well empty" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test datetime column &gt; Date only stuff" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test datetime column &gt; test display value, from and to input" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test datetime column &gt; date Storage works 1" time="0.016">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Test char date storage &gt; from db" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Test char date storage &gt; to db" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="value list column without id and caption &gt; getValueList" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="context &gt; what" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="context &gt; is allowed for instance works with array" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="context &gt; test no user is not allowed" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test http provider for remult" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="allow &gt; should work" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test  &gt; Test Validation," time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test object column stored as string &gt; test recursive type" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test object column stored as string &gt; was changed should work correctly" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Test basic row functionality &gt; filter on date keeps the type" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Test basic row functionality &gt; finds its id column" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Test basic row functionality &gt; object assign works" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Test basic row functionality &gt; Original values update correctly" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Test basic row functionality &gt; Find or Create" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Test basic row functionality &gt; Find or Create id" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Test basic row functionality &gt; object is autonemous" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Test basic row functionality &gt; find the col value" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="Test basic row functionality &gt; can be saved to a pojo" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; get based on id" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; get based on id virtual column" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; get based on id virtual column async" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; get based on id can fail" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; validate with validations on column fails" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; validation works on non active record" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; validation" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; validate with validations on column fails 1" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; put with validations on entity fails" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; delete fails when not found" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; delete works " time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; delete falis nicely " time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; post works" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; post works for array" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; post fails on duplicate index" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; getArray works" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; getArray works with filter" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; getArray works with filter and multiple values" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; getArray works with filter and multiple values with closed list columns" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; getArray works with filter and in with closed list columns" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; get array works with filter in body and in array statement" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; get array works with filter in body and or statement" time="0.005">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; delete with validation fails" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; delete with validation exception fails" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; delete with validation exception fails - no data api" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; delete works" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; check api defaults" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; put with validation fails" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; afterSave works" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; afterSave works on insert" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; put with disable save still works" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; get based on id with excluded columns" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; row reload" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; Find null works" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; put updates" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; put updates and readonly columns" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; put fails when not found" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; put updates" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; post with syntax error fails well" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; getArray works with filter contains" time="0.005">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; getArray works with predefined filter" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; allow api read depends also on api crud" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; allow api read depends also on api crud" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; read is not Allowed" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; get is not Allowed" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; count is not Allowed" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; delete id  not Allowed" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; apiRequireId" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; apiRequireId in" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; delete id  not Allowed for specific row" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; update id  not Allowed for specific row" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; insert id  not Allowed for specific row" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; getArray works with sort" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="data api &gt; columnsAreOk" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="rest call use url get or fallback to post &gt; should get" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="rest call use url get or fallback to post &gt; should get 1" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="rest call use url get or fallback to post &gt; should get 2" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="rest call use url get or fallback to post &gt; should get 3" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="rest call use url get or fallback to post &gt; should post " time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="rest call use url get or fallback to post &gt; should post " time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="column validation &gt; validation clears on reset" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="column validation &gt; validation clears on change" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="compound id &gt; id field is compound" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="compound id &gt; result id filter works with object" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="compound id &gt; check is auto increment" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="compound id &gt; result id filter works with id" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="compound id &gt; some things should not work" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="compound id &gt; start" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="compound id &gt; update" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="compound id &gt; update2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="compound id &gt; insert" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="compound id &gt; delete" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test data list &gt; dbname of entity string works" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test data list &gt; dbname of entity can use column names" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test date storage &gt; works" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test date storage &gt; works" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="dbname of entity string works when key is not defined" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test bool value &gt; should work" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="cache &gt; find first useCache" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="cache &gt; find id" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test rest data provider translates data correctly &gt; rest data provider works with update" time="0.007">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test rest data provider translates data correctly &gt; get works" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test rest data provider translates data correctly &gt; test api client" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test rest data provider translates data correctly &gt; put works" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test rest data provider translates data correctly &gt; put works" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; 1" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; a" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; a" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; a" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; a" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; a" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; a" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; a" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; roleA" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; roleC" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; roleA" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; roleC" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; roleC,roleA" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; roleC,strD" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; (c2) =&gt; c2.isAllowed(roleA)" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; true" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; false" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; undefined" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="check allowedDataType &gt; no context" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test http retry &gt; test http retry for proxy" time="0.252">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test http retry &gt; fails on other errors" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test http retry &gt; fails on other errors that has no message" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test toPromise &gt; handles rxjs style" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test toPromise &gt; handles normal promise" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test toPromise &gt; handles axios results" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="CompoundIdPojoEntity &gt; test basic operations" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="CompoundIdPojoEntity &gt; test delete by id" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="CompoundIdPojoEntity &gt; test delete" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="CompoundIdPojoEntity &gt; test delete with partial object" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="CompoundIdPojoEntity &gt; test save" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="CompoundIdPojoEntity &gt; test update" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="CompoundIdPojoEntity &gt; test update" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="CompoundIdPojoEntity &gt; test update" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="CompoundIdPojoEntity &gt; test update_rest" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="CompoundIdPojoEntity &gt; test another compound update" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="CompoundIdPojoEntity &gt; test update 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="CompoundIdPojoEntity &gt; test update change of id fields" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; test remult with non default fetch function" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; test remult with non default fetch function1" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; axios uses the correct api" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; get" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; error" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; error4" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; error3" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; error2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; post" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; put" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; delete" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; rest doesn&apos;t support transactions" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; json field works" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/basicRowFunctionality.spec.ts" name="test fetch &gt; test repo consistent instance" time="0">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/live-query-tests.spec.ts" timestamp="2023-12-25T12:58:02.960Z" hostname="Noamnew2018" tests="34" failures="0" errors="0" skipped="0" time="0.096">
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="Live Query &gt; test that data is sent with correct remult user" time="0.014">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="Live Query &gt; test that id change is supported" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="Live Query &gt; new row is reported" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="Live Query &gt; removed row is reported" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="Live Query Client &gt; registers once" time="0.005">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; integration test 1" time="0.009">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; integration test 2" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test relations work" time="0.005">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test delete works" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test sort works" time="0.005">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test add works if item already in array" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test add works if item already in array" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test quick unsubscribe before subscribe completes" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test quick unsubscribe before query completes" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test quick unsubscribe and subscribe" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test unsubscribe works" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test unsubscribe works after  subscribe and unsubscribe" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test unsubscribe works after a quick subscribe and unsubscribe" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test disconnect and reconnect scenario" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; expect pure json object, from live query" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test 2 subscriptions work" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test subscription leak" time="0.007">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; test subscription and or condition" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; error on channel open" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test live query full cycle &gt; error on channel open" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="Serialize Find Options" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="Serialize Find Options1" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="Serialize Find Options3" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="Serialize Find Options2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test channel subscribe" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test failure &gt; error on subscribe query" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test failure &gt; test error on query, automatically unsubscribes" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test failure &gt; error on subscribe" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/live-query-tests.spec.ts" name="test failure &gt; Error on open connection" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/remult-3-basic-tests.spec.ts" timestamp="2023-12-25T12:58:02.970Z" hostname="Noamnew2018" tests="15" failures="0" errors="0" skipped="0" time="0.044">
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test the very basics" time="0.011">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test save scenarios" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test save scenarios2" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test save scenarios3" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test save scenarios4" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test save scenarios 5" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test save scenarios 6" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test save scenarios 7" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test delete scenarios" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test delete scenarios 1" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test delete scenarios 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test insert works with active record and fails on existing one" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; save works with array" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test update of object" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/remult-3-basic-tests.spec.ts" name="remult-3-basics &gt; test update of object data api" time="0.009">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/RowProvider.spec.ts" timestamp="2023-12-25T12:58:02.974Z" hostname="Noamnew2018" tests="45" failures="0" errors="0" skipped="0" time="0.049">
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="grid filter stuff &gt; filter with contains" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="grid filter stuff &gt; filter with contains" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="grid filter stuff &gt; test in statement" time="0.007">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="Closed List  column &gt; Basic Operations" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="Closed List  column &gt; test auto caption" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="Closed List  column &gt; test with entity" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="Closed List  column &gt; test with entity and data defined on type" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="Closed List  column &gt; test entity with value list get values" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; auto name" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; test update" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; test filter" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; test in filter packer" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; sort" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; counts" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; counts with filter" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; Test Validation 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; Test Validation 2_1" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; Test Validation 3" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; Test unique Validation and is not empty" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; test that it fails nicely" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; update should fail nicely" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; filter should return none" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; filter ignore works return none" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test row provider &gt; lookup survives row that doesn&apos;t exist" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="decorator inheritance &gt; entity extends" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="order by api &gt; works with sort" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="order by api &gt; works with columns array" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="order by api &gt; test several sort options" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test datetime column &gt; stores well" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test datetime column &gt; stores well undefined" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test datetime column &gt; displays empty date well" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test datetime column &gt; displays null date well 1" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test datetime column &gt; displays empty date well empty" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test datetime column &gt; Date only stuff" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test datetime column &gt; test display value, from and to input" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test datetime column &gt; date Storage works 1" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="Test char date storage &gt; from db" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="Test char date storage &gt; to db" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="value list column without id and caption &gt; getValueList" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="context &gt; what" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="context &gt; is allowed for instance works with array" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="context &gt; test no user is not allowed" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test http provider for remult" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="allow &gt; should work" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/RowProvider.spec.ts" name="test  &gt; Test Validation," time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-api-remult.spec.ts" timestamp="2023-12-25T12:58:02.984Z" hostname="Noamnew2018" tests="1" failures="0" errors="0" skipped="0" time="0.015">
        <testcase classname="projects/tests/tests/test-api-remult.spec.ts" name="type inheritance works" time="0.014">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-decorator-precedence.spec.ts" timestamp="2023-12-25T12:58:02.985Z" hostname="Noamnew2018" tests="2" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="projects/tests/tests/test-decorator-precedence.spec.ts" name="test decorator precedence &gt; test basics" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/test-decorator-precedence.spec.ts" name="test decorator precedence &gt; testit" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-default-value.spec.ts" timestamp="2023-12-25T12:58:02.985Z" hostname="Noamnew2018" tests="2" failures="0" errors="0" skipped="0" time="0.008">
        <testcase classname="projects/tests/tests/test-default-value.spec.ts" name="test default value &gt; test basics" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-default-value.spec.ts" name="test default value &gt; test create without querying the value" time="0.004">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-entity-inheritance.spec.ts" timestamp="2023-12-25T12:58:02.986Z" hostname="Noamnew2018" tests="4" failures="0" errors="0" skipped="0" time="0.081">
        <testcase classname="projects/tests/tests/test-entity-inheritance.spec.ts" name="saving works well " time="0.032">
        </testcase>
        <testcase classname="projects/tests/tests/test-entity-inheritance.spec.ts" name="saving works well when child doesnt have saving" time="0.014">
        </testcase>
        <testcase classname="projects/tests/tests/test-entity-inheritance.spec.ts" name="test saving of delete" time="0.034">
        </testcase>
        <testcase classname="projects/tests/tests/test-entity-inheritance.spec.ts" name="test error on save within saving" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-exceptions.spec.ts" timestamp="2023-12-25T12:58:02.987Z" hostname="Noamnew2018" tests="11" failures="0" errors="0" skipped="0" time="0.012">
        <testcase classname="projects/tests/tests/test-exceptions.spec.ts" name="test exception &gt; test save exception" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/test-exceptions.spec.ts" name="angular http client exception  &gt; waiting for proxy to restart" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-exceptions.spec.ts" name="angular http client exception  &gt; network disconnect" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-exceptions.spec.ts" name="angular http client exception  &gt; Forbidden" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-exceptions.spec.ts" name="angular http client exception  &gt; syntax error" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-exceptions.spec.ts" name="angular http client exception  &gt; validation error" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-exceptions.spec.ts" name="fetch client exception  &gt; waiting for proxy to restart" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-exceptions.spec.ts" name="fetch client exception  &gt; network disconnect" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-exceptions.spec.ts" name="fetch client exception  &gt; Forbidden" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-exceptions.spec.ts" name="fetch client exception  &gt; syntax error" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-exceptions.spec.ts" name="fetch client exception  &gt; validation error" time="0">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-json.spec.ts" timestamp="2023-12-25T12:58:02.990Z" hostname="Noamnew2018" tests="2" failures="0" errors="0" skipped="0" time="0.014">
        <testcase classname="projects/tests/tests/test-json.spec.ts" name="test tasks &gt; test tasks" time="0.011">
        </testcase>
        <testcase classname="projects/tests/tests/test-json.spec.ts" name="test data api response fails on wrong answer" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" timestamp="2023-12-25T12:58:02.991Z" hostname="Noamnew2018" tests="77" failures="0" errors="0" skipped="0" time="0.105">
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="grid filter stuff &gt; filter with contains" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="grid filter stuff &gt; filter with contains" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="grid filter stuff &gt; test in statement" time="0.008">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="Closed List  column &gt; Basic Operations" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="Closed List  column &gt; test auto caption" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="Closed List  column &gt; test with entity" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="Closed List  column &gt; test with entity and data defined on type" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="Closed List  column &gt; test entity with value list get values" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; auto name" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; test update" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; test filter" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; test in filter packer" time="0.006">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; sort" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; counts" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; counts with filter" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; Test Validation 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; Test Validation 2_1" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; Test Validation 3" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; Test unique Validation and is not empty" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; test that it fails nicely" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; update should fail nicely" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; filter should return none" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; filter ignore works return none" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test row provider &gt; lookup survives row that doesn&apos;t exist" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="decorator inheritance &gt; entity extends" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="order by api &gt; works with sort" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="order by api &gt; works with columns array" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="order by api &gt; test several sort options" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test datetime column &gt; stores well" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test datetime column &gt; stores well undefined" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test datetime column &gt; displays empty date well" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test datetime column &gt; displays null date well 1" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test datetime column &gt; displays empty date well empty" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test datetime column &gt; Date only stuff" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test datetime column &gt; test display value, from and to input" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test datetime column &gt; date Storage works 1" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="Test char date storage &gt; from db" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="Test char date storage &gt; to db" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="value list column without id and caption &gt; getValueList" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="context &gt; what" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="context &gt; is allowed for instance works with array" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="context &gt; test no user is not allowed" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test http provider for remult" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="allow &gt; should work" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test  &gt; Test Validation," time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; xx" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test that it is loaded to begin with" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test repo save" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test repo save2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test that it is loaded onDemand" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test that it is loaded onDemand" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; what" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test wait load" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test null" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test stages" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test update from api" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test easy create" time="0.007">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test filter create" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test that not too many reads are made" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test that not too many reads are made when getting multiple entities" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test update only updates what&apos;s needed" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test is null doesn&apos;t invoke read" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test to and from json " time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test to and from json 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test to and from json 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test lookup with create" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test set with id" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test set with json object" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test filter with id" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test cache" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="many to one relation &gt; test cache2" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="Test entity relation and count finds &gt; test it" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="Test entity relation and count finds &gt; test api" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="Test entity relation and count finds &gt; test api get array doesn&apos;t load" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test that it doesn&apos;t save if it doesn&apos;t need to" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="test set uuid" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-many-to-one-relation-in-entity.spec.ts" name="Test many to one without active record &gt; should work" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-non-active-record.spec.ts" timestamp="2023-12-25T12:58:03.012Z" hostname="Noamnew2018" tests="5" failures="0" errors="0" skipped="0" time="0.013">
        <testcase classname="projects/tests/tests/test-non-active-record.spec.ts" name="test non active record &gt; test save of new row validation" time="0.005">
        </testcase>
        <testcase classname="projects/tests/tests/test-non-active-record.spec.ts" name="test non active record &gt; test save of existing row validation" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/test-non-active-record.spec.ts" name="test non active record &gt; test save doesn&apos;t return non row elements" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-non-active-record.spec.ts" name="test non active record &gt; delete works with non active record" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-non-active-record.spec.ts" name="test non active record &gt; test save doesn&apos;t return the messed up object" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-paged-foreach.spec.ts" timestamp="2023-12-25T12:58:03.014Z" hostname="Noamnew2018" tests="16" failures="0" errors="0" skipped="0" time="0.05">
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; basic foreach with where" time="0.014">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; basic foreach with where 2" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; basic foreach with order by" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; basic foreach with order by desc" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; iterate" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; paginate" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; paginate3" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; paginate2" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; paginate" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; paginate on boundries" time="0.008">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; test toArray" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; test make sort unique" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; unique sort and  compound id" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; create rows after filter compound id" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; create rows after filter, values are frozen when filter is created" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-paged-foreach.spec.ts" name="test paged foreach  &gt; serialize filter with or" time="0">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-router-impl.spec.ts" timestamp="2023-12-25T12:58:03.017Z" hostname="Noamnew2018" tests="2" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="projects/tests/tests/test-router-impl.spec.ts" name="test router impl &gt; test a" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-router-impl.spec.ts" name="test router impl &gt; test b" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-saving-not-on-proxy.spec.ts" timestamp="2023-12-25T12:58:03.018Z" hostname="Noamnew2018" tests="2" failures="0" errors="0" skipped="0" time="0.017">
        <testcase classname="projects/tests/tests/test-saving-not-on-proxy.spec.ts" name="test saving happens only no db &gt; saving runs when close to db" time="0.007">
        </testcase>
        <testcase classname="projects/tests/tests/test-saving-not-on-proxy.spec.ts" name="test saving happens only no db &gt; saving doesnt run with proxy" time="0.009">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-server-controller.spec.ts" timestamp="2023-12-25T12:58:03.019Z" hostname="Noamnew2018" tests="35" failures="0" errors="0" skipped="0" time="0.053">
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; forbidden static backend" time="0.008">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; forbidden static backend" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; forbidden static backend" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; forbidden backend" time="0.006">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; forbidden entity" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test error" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test error server method" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; send entity to server " time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; send entity to server " time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; send entity to server prepare args to send " time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; data is saved on server" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; new backend method syntax static method with remult" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; new backend method syntax static method" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; new backend method syntax 1" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; new backend method syntax 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test backend method caller" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test backend method caller with proxy" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test backend method instance method" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test backend method instance method with proxy" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test server function" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test server function on server" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test server Method Date" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test server Method Date on server" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test server Method myType" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test server method entity" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test server function Date" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test server function custom type" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test server method" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test validation method" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test validation on server" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test static backend method " time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test backend method with adhoc entity" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test static backend method with adhoc controller" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="test Server Controller basics &gt; test remult proxy for repository" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-controller.spec.ts" name="controller with extends  &gt; test inheritance in controllers" time="0">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-server-expressions.spec.ts" timestamp="2023-12-25T12:58:03.025Z" hostname="Noamnew2018" tests="7" failures="0" errors="0" skipped="0" time="0.034">
        <testcase classname="projects/tests/tests/test-server-expressions.spec.ts" name="test server expression value &gt; test basics create" time="0.007">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-expressions.spec.ts" name="test server expression value &gt; test basics find" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-expressions.spec.ts" name="test server expression value &gt; test doesnt calc on client" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-expressions.spec.ts" name="test server expression value &gt; test basics find doesnt calc on client" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-expressions.spec.ts" name="test server expression value &gt; test uuid" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-expressions.spec.ts" name="test server expression value &gt; test cuid" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-expressions.spec.ts" name="test server expression value &gt; test createdAt" time="0.02">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-server-method-on-entity.spec.ts" timestamp="2023-12-25T12:58:03.028Z" hostname="Noamnew2018" tests="14" failures="0" errors="0" skipped="0" time="0.071">
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="test Server method in entity &gt; test server method on Entity" time="0.007">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="test Server method in entity &gt; test server method on Entity without decorator" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="test Server method in entity &gt; test server method on Entity" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="test Server method in entity &gt; test validation method" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="test Server method in entity &gt; test backend method with adhoc entity" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="test Server method in entity &gt; test static backend method with adhoc entity" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="test Server method in entity &gt; test validation on server" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="test Server method in entity &gt; saves correctly to db" time="0.03">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="test Server method in entity &gt; test instance backend method insert with allowApiUpdate=false" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="complex entity relations on server entity and backend method &gt; fix it" time="0.005">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="complex entity relations on server entity and backend method &gt; fix it new row" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="complex entity relations on server entity and backend method &gt; fix it change value" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="test that entity backend method respects api filter" time="0.009">
        </testcase>
        <testcase classname="projects/tests/tests/test-server-method-on-entity.spec.ts" name="test api filter cant be overwritten" time="0.004">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-sort.spec.ts" timestamp="2023-12-25T12:58:03.031Z" hostname="Noamnew2018" tests="1" failures="0" errors="0" skipped="0" time="0.01">
        <testcase classname="projects/tests/tests/test-sort.spec.ts" name="test sorts &gt; test sort" time="0.008">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-subscribe.spec.ts" timestamp="2023-12-25T12:58:03.031Z" hostname="Noamnew2018" tests="5" failures="0" errors="0" skipped="0" time="0.025">
        <testcase classname="projects/tests/tests/test-subscribe.spec.ts" name="test subscribe &gt; basics" time="0.008">
        </testcase>
        <testcase classname="projects/tests/tests/test-subscribe.spec.ts" name="test subscribe &gt; observed" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-subscribe.spec.ts" name="test subscribe &gt; refInitWorks" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-subscribe.spec.ts" name="test subscribe &gt; test subscribe with many to one" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-subscribe.spec.ts" name="test subscribe &gt; test subscribe to field with many to one" time="0">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-type-recovery.spec.ts" timestamp="2023-12-25T12:58:03.032Z" hostname="Noamnew2018" tests="6" failures="0" errors="0" skipped="0" time="0.016">
        <testcase classname="projects/tests/tests/test-type-recovery.spec.ts" name="type recovery &gt; test insert works with Date" time="0.007">
        </testcase>
        <testcase classname="projects/tests/tests/test-type-recovery.spec.ts" name="type recovery &gt; test validate with Date" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-type-recovery.spec.ts" name="type recovery &gt; test create" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-type-recovery.spec.ts" name="type recovery &gt; test save works with Date" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-type-recovery.spec.ts" name="type recovery &gt; test update using save" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-type-recovery.spec.ts" name="type recovery &gt; test update " time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-where-api.spec.ts" timestamp="2023-12-25T12:58:03.034Z" hostname="Noamnew2018" tests="78" failures="0" errors="0" skipped="0" time="0.087">
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="grid filter stuff &gt; filter with contains" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="grid filter stuff &gt; filter with contains" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="grid filter stuff &gt; test in statement" time="0.009">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="Closed List  column &gt; Basic Operations" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="Closed List  column &gt; test auto caption" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="Closed List  column &gt; test with entity" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="Closed List  column &gt; test with entity and data defined on type" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="Closed List  column &gt; test entity with value list get values" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; auto name" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; test update" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; test filter" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; test in filter packer" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; sort" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; counts" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; counts with filter" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; Test Validation 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; Test Validation 2_1" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; Test Validation 3" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; Test unique Validation and is not empty" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; test that it fails nicely" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; update should fail nicely" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; filter should return none" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; filter ignore works return none" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test row provider &gt; lookup survives row that doesn&apos;t exist" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="decorator inheritance &gt; entity extends" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="order by api &gt; works with sort" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="order by api &gt; works with columns array" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="order by api &gt; test several sort options" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test datetime column &gt; stores well" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test datetime column &gt; stores well undefined" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test datetime column &gt; displays empty date well" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test datetime column &gt; displays null date well 1" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test datetime column &gt; displays empty date well empty" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test datetime column &gt; Date only stuff" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test datetime column &gt; test display value, from and to input" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test datetime column &gt; date Storage works 1" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="Test char date storage &gt; from db" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="Test char date storage &gt; to db" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="value list column without id and caption &gt; getValueList" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="context &gt; what" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="context &gt; is allowed for instance works with array" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="context &gt; test no user is not allowed" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test http provider for remult" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="allow &gt; should work" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test  &gt; Test Validation," time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test in statement" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test and" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test two values" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test two values" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test in and" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test or and" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test or and json" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test basics" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test basics_2" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test basics_2_2" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test basics_2_3" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test basics_2_1" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="test where stuff &gt; test basics_3" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; test that it works" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; works with serialize filter" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; test that it works" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; test that it works with arrayFilter" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; test or and promise in translate" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; test sent in api" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; test order by on rest request" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; test order by on rest request" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; test find id on api" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; test that api reads custom correctly" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; test that api reads custom correctly 2" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; test that api reads custom correctly 3" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="custom filter &gt; test that api reads custom correctly and translates to db" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="missing fields are added in array column &gt; not allow null" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="missing fields are added in array column &gt; allow  null" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="missing fields are added in array column &gt; test api with and" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="missing fields are added in array column &gt; test api with and" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="missing fields are added in array column &gt; test toToRawFilter" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="missing fields are added in array column &gt; test toToRawFilter b" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-where-api.spec.ts" name="missing fields are added in array column &gt; test toToRawFilter and api prefilter" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-auto-load.spec.ts" timestamp="2023-12-25T12:58:03.052Z" hostname="Noamnew2018" tests="5" failures="0" errors="0" skipped="0" time="0.021">
        <testcase classname="projects/tests/tests/relations/test-auto-load.spec.ts" name="test repository relations &gt; loads" time="0.012">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-auto-load.spec.ts" name="test repository relations &gt; loads partial" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-auto-load.spec.ts" name="test repository relations &gt; doesn&apos;t loads" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-auto-load.spec.ts" name="test repository relations &gt; find one works" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-auto-load.spec.ts" name="test repository relations &gt; waitLoad works" time="0.003">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-backend-instance-method.spec.ts" timestamp="2023-12-25T12:58:03.053Z" hostname="Noamnew2018" tests="2" failures="0" errors="0" skipped="0" time="0.03">
        <testcase classname="projects/tests/tests/relations/test-backend-instance-method.spec.ts" name="relations to one behavior &gt; test how backend method works a" time="0.027">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-backend-instance-method.spec.ts" name="relations to one behavior &gt; test how load works when there&apos;s no value" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-circular-auto-load.spec.ts" timestamp="2023-12-25T12:58:03.054Z" hostname="Noamnew2018" tests="1" failures="0" errors="0" skipped="0" time="0.022">
        <testcase classname="projects/tests/tests/relations/test-circular-auto-load.spec.ts" name="test repository relations &gt; test that it works" time="0.012">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-many-to-one-with-id-and-include.spec.ts" timestamp="2023-12-25T12:58:03.055Z" hostname="Noamnew2018" tests="4" failures="0" errors="0" skipped="0" time="0.025">
        <testcase classname="projects/tests/tests/relations/test-many-to-one-with-id-and-include.spec.ts" name="test repository relations &gt; test doesn&apos;t fetch category" time="0.008">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-many-to-one-with-id-and-include.spec.ts" name="test repository relations &gt; test  fetch category" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-many-to-one-with-id-and-include.spec.ts" name="test repository relations &gt; test  fetch category and include company" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-many-to-one-with-id-and-include.spec.ts" name="test repository relations &gt; test fetch category and not include" time="0">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-null-issue.spec.ts" timestamp="2023-12-25T12:58:03.056Z" hostname="Noamnew2018" tests="2" failures="0" errors="0" skipped="0" time="0.013">
        <testcase classname="projects/tests/tests/relations/test-null-issue.spec.ts" name="test null issue &gt; test the null issue" time="0.01">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-null-issue.spec.ts" name="test null issue &gt; test the null issue b" time="0.003">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-relations.spec.ts" timestamp="2023-12-25T12:58:03.056Z" hostname="Noamnew2018" tests="20" failures="0" errors="0" skipped="0" time="0.107">
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; test input type" time="0.009">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; no extra data is loaded" time="0.015">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; loads on demand" time="0.005">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; loads reference to field" time="0.009">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; test update and return of referenced fields" time="0.005">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; test query" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; test query for await" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; loads many" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; load recursive" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; test match and limit" time="0.005">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; to and from json work" time="0.007">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; basic to and from json work" time="0.006">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; test optimization" time="0.009">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; loads ok also with old field reference" time="0.007">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; doesn&apos;t share cache with old fields" time="0.007">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; fails with error field" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test relations &gt; fails when cant anticipate many" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test new id definition" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test null and related field " time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-relations.spec.ts" name="test dbname" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-repository-relations-based-on-columns.spec.ts" timestamp="2023-12-25T12:58:03.060Z" hostname="Noamnew2018" tests="1" failures="0" errors="0" skipped="0" time="0.013">
        <testcase classname="projects/tests/tests/relations/test-repository-relations-based-on-columns.spec.ts" name="test repository relations &gt; can insert" time="0.012">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-repository-relations.spec.ts" timestamp="2023-12-25T12:58:03.061Z" hostname="Noamnew2018" tests="1" failures="0" errors="0" skipped="0" time="0.015">
        <testcase classname="projects/tests/tests/relations/test-repository-relations.spec.ts" name="test repository relations &gt; can insert" time="0.014">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-to-one-relation-update.spec.ts" timestamp="2023-12-25T12:58:03.061Z" hostname="Noamnew2018" tests="5" failures="0" errors="0" skipped="0" time="0.016">
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-update.spec.ts" name="relations to one behavior &gt; update of relation shouldn&apos;t behave as change toOne" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-update.spec.ts" name="relations to one behavior &gt; update of relation shouldn&apos;t behave as change toRef" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-update.spec.ts" name="relations to one behavior &gt; update of relation shouldn&apos;t behave as change toMany" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-update.spec.ts" name="relations to one behavior &gt; test missing value" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-update.spec.ts" name="relations to one behavior &gt; verify that save does not load relations for no reason" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-data-api/predefined-filter.spec.ts" timestamp="2023-12-25T12:58:03.063Z" hostname="Noamnew2018" tests="19" failures="0" errors="0" skipped="0" time="0.051">
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; getArray works with predefined filter" time="0.012">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; get works with predefined filter" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; get id  works with predefined filterand shouldnt return anything" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; delete id  works with predefined filterand shouldnt return anything" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; delete id  works with predefined filterand shouldnt return anything" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; put id  works with predefined filterand shouldnt return anything" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; put id 1 works with predefined filterand shouldnt return anything" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; put id 1 works with predefined filterand shouldnt return anything" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; getArray works with predefined filter" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; getArray works with predefined filter1 " time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; getArray works with predefined filter 2" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; getArray works with predefined filter 3" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; getArray works with predefined filter 3 inherit" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; getArray works with predefined filter 4" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; getArray works with predefined filter and inheritance" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="data api &gt; works with predefined Entity Filter" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="works with predefined Entity Filter" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="works with predefined Entity Filter lambda" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/predefined-filter.spec.ts" name="backend filter only works on backend" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/test-data-api/test-put-with-validation.spec.ts" timestamp="2023-12-25T12:58:03.067Z" hostname="Noamnew2018" tests="6" failures="0" errors="0" skipped="0" time="0.016">
        <testcase classname="projects/tests/tests/test-data-api/test-put-with-validation.spec.ts" name="data api &gt; put with validations fails" time="0.01">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/test-put-with-validation.spec.ts" name="data api &gt; post with validation fails" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/test-put-with-validation.spec.ts" name="data api &gt; allow column update based on new row only" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/test-put-with-validation.spec.ts" name="data api &gt; allow column update based on specific value" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/test-put-with-validation.spec.ts" name="data api &gt; test value list type" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/test-data-api/test-put-with-validation.spec.ts" name="Test validation with exception &gt; " time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relation-without-field.spec.ts" timestamp="2023-12-25T12:58:03.069Z" hostname="Noamnew2018" tests="11" failures="0" errors="0" skipped="0" time="0.036">
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relation-without-field.spec.ts" name="test that update only has updated fields" time="0.014">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relation-without-field.spec.ts" name="test one &gt; test derived many" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relation-without-field.spec.ts" name="test one &gt; test insert" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relation-without-field.spec.ts" name="test one &gt; test update" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relation-without-field.spec.ts" name="test one &gt; test repo update" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relation-without-field.spec.ts" name="test one &gt; test repo save" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relation-without-field.spec.ts" name="test one &gt; test repo update b" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relation-without-field.spec.ts" name="test one &gt; test repo save b" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relation-without-field.spec.ts" name="test one &gt; test repo update c" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relation-without-field.spec.ts" name="test one &gt; test repo save c" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relation-without-field.spec.ts" name="test one &gt; test filter" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" timestamp="2023-12-25T12:58:03.071Z" hostname="Noamnew2018" tests="16" failures="0" errors="0" skipped="0" time="0.044">
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test derived many" time="0.012">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test id" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test insert" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test update" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test repo update" time="0.005">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test repo save" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test repo update b" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test repo save b" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test repo update c" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test repo save c" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test filter equal to json" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test filter in to json" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test filter in to json b" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test filter not equal to json" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test filter not equal i to json" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-compound-id.spec.ts" name="test one &gt; test filter" time="0.003">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" timestamp="2023-12-25T12:58:03.075Z" hostname="Noamnew2018" tests="15" failures="0" errors="0" skipped="0" time="0.036">
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test derived many" time="0.012">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test insert" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test update" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test repo update" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test repo save" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test repo update b" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test repo save b" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test repo update c" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test repo save c" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test filter equal to json" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test filter in to json" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test filter not equal to json" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test filter not equal in to json" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test filter" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations-with-fields.spec.ts" name="test one &gt; test sort" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" timestamp="2023-12-25T12:58:03.077Z" hostname="Noamnew2018" tests="21" failures="0" errors="0" skipped="0" time="0.073">
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test derived many" time="0.019">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test insert" time="0.007">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test update" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test repo update" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test repo save" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test repo update b" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test repo save b" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test repo update c" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test repo save c" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test filter equal to json" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test filter in to json" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test filter in to json c" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test filter in to json b" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test filter in to json b" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test filter not equal to json" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test filter not equal i to json" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test filter" time="0.003">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test sort" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test more than one relation" time="0.009">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test api of to one" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-one-relations.spec.ts" name="test one &gt; test what reaches the db" time="0.003">
        </testcase>
    </testsuite>
    <testsuite name="projects/tests/tests/relations/test-to-one-relation-variatons/test-relations-on-api.spec.ts" timestamp="2023-12-25T12:58:03.081Z" hostname="Noamnew2018" tests="9" failures="0" errors="0" skipped="0" time="0.023">
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-relations-on-api.spec.ts" name="Test relations on api &gt; shouldn&apos;t return defaultIncluded in api" time="0.01">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-relations-on-api.spec.ts" name="Test relations on api &gt; shouldn&apos;t return defaultIncluded in api to many get array" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-relations-on-api.spec.ts" name="Test relations on api &gt; shouldn&apos;t return defaultIncluded in api to many update" time="0.004">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-relations-on-api.spec.ts" name="Test relations on api &gt; shouldn&apos;t return defaultIncluded in api to many" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-relations-on-api.spec.ts" name="Test relations on api &gt; should return a value" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-relations-on-api.spec.ts" name="Test relations on api &gt; should return a value too" time="0">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-relations-on-api.spec.ts" name="Test relations on api &gt; should return a value too b" time="0.001">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-relations-on-api.spec.ts" name="Test relations on api &gt; should return a value too c" time="0.002">
        </testcase>
        <testcase classname="projects/tests/tests/relations/test-to-one-relation-variatons/test-relations-on-api.spec.ts" name="Test relations on api &gt; override default included" time="0.002">
        </testcase>
    </testsuite>
</testsuites>
